#!/usr/bin/bash

ETH_DIR=/root/eth_bootstrap
CONSENSUS=$ETH_DIR/eth_node/consensus
EXECUTION=$ETH_DIR/eth_node/execution
ETH_BIN=$ETH_DIR/eth_bin

function docker_run_rm() {
  local COMMAND="docker run -i --rm \
                  -v ./eth_node:/root/eth_bootstrap/eth_node \
                  eth_node ./l2 $1"
  echo $COMMAND | sh
}

function  deposit_cli() {
    cd $ETH_DIR
    rmdir staking_deposit-cli-fdab65d-linux-amd64
    rm staking_deposit-cli-fdab65d-linux-amd64.tar.gz
    wget https://github.com/ethereum/staking-deposit-cli/releases/download/v2.7.0/staking_deposit-cli-fdab65d-linux-amd64.tar.gz
    tar -xvzf staking_deposit-cli-fdab65d-linux-amd64.tar.gz
    mv staking_deposit-cli-fdab65d-linux-amd64/deposit $ETH_BIN/deposit-cli
    rmdir staking_deposit-cli-fdab65d-linux-amd64
    rm staking_deposit-cli-fdab65d-linux-amd64.tar.gz
}

function new_mnemonic(){
  cd $ETH_DIR
  rm -rf validator_keys
  LC_ALL=C.UTF-8 LANG=C.UTF-8 $ETH_BIN/deposit-cli --language english  --non_interactive new-mnemonic  \
                                            --mnemonic_language english \
                                            --num_validators 1 \
                                            --chain mainnet \
                                            --keystore_password gluon_gluon
}

function verify_chain(){
  local IMPORTED_ACCOUNT=0x123463a4b065722e99115d6c222f267d9cabb524
  local DEPOSIT_ACCOUNT=$1
  echo "Balance: $IMPORTED_ACCOUNT $(get_balance $IMPORTED_ACCOUNT)"
  echo "Balance: $DEPOSIT_ACCOUNT $(get_balance $DEPOSIT_ACCOUNT)"
  echo "Transfering 1 ETH from $IMPORTED_ACCOUNT to $DEPOSIT_ACCOUNT"
  transfer $IMPORTED_ACCOUNT $DEPOSIT_ACCOUNT 0x$(echo "obase=16; 5000000000000000000000" | bc)
  sleep 10
  echo "Balance: $IMPORTED_ACCOUNT $(get_balance $IMPORTED_ACCOUNT)"
  echo "Balance: $DEPOSIT_ACCOUNT $(get_balance $DEPOSIT_ACCOUNT)"
}

function transfer(){
  local FROM=$1
  local TO=$2
  local AMOUNT=$3
  echo "Transfering $AMOUNT from $FROM to $TO"
  curl --silent -X POST -H "Content-Type: application/json"  \
       --data "{\"jsonrpc\":\"2.0\",\"method\":\"eth_sendTransaction\",\"params\":[{\"from\":\"$FROM\",\"to\":\"$TO\",\"value\":\"$AMOUNT\"}],\"id\":1}" \
        http://localhost:8545

}

function get_balance(){
  local ADDRESS=$1
  curl --silent -X POST -H "Content-Type: application/json"  \
       --data "{\"jsonrpc\":\"2.0\",\"method\":\"eth_getBalance\",\"params\":[\"$ADDRESS\", \"latest\"],\"id\":1}" \
        http://localhost:8545 | jq --raw-output '.result' | perl -lane 'print hex($F[0])'
}

function docker_build() {
  echo "Building docker image"
  docker build -t eth_node .
}

function beacon_genesis(){
    echo "Generating beacon genesis"
    mkdir -p $CONSENSUS
    mkdir -p $EXECUTION
    cd $CONSENSUS
    cp $ETH_DIR/config.yml .
    cp $ETH_DIR/genesis.json .
    $ETH_BIN/prysmctl testnet generate-genesis --fork capella --num-validators 64 --genesis-time-delay 120 --chain-config-file $CONSENSUS/config.yml --geth-genesis-json-in $CONSENSUS/genesis.json --geth-genesis-json-out $EXECUTION/genesis.json --output-ssz $CONSENSUS/genesis.ssz
}
function geth_genesis(){
    mkdir -p $EXECUTION
    cd $EXECUTION
    rm -rf .gethdata/geth
    $ETH_BIN/geth --datadir=$EXECUTION/.gethdata init $EXECUTION/genesis.json
}
function docker_genesis() {
  echo "Running genesis for $1"
  local OPERATION=$1
  shift
  case $OPERATION in
    beacon) docker_run_rm beacon_genesis;;
    geth) docker_run_rm geth_genesis;;
    *) for cont in beacon geth; do docker_genesis $cont; done;;
  esac
}

function account_import(){
    cd $EXECUTION
    rm -rf .gethdata/keystore
    $ETH_BIN/geth --datadir=$EXECUTION/.gethdata account \
      import --password ../../geth_password.txt $ETH_DIR/secret.txt
}
function docker_account_import() {
  docker_run_rm import
}

function docker_stop() {
  echo "Stopping docker containers $1"
  local OPERATION=$1
  shift
  case $OPERATION in
    beacon) docker stop beacon; docker rm beacon;;
    execution) docker stop execution; docker rm execution;;
    validator) docker stop validator; docker rm validator;;
    *) for cont in beacon execution validator; do docker_stop $cont; done;;
  esac
}

function geth_start(){
  $ETH_BIN/geth --http --http.addr 0.0.0.0 --http.corsdomain=* \
    --authrpc.vhosts=* --authrpc.addr 0.0.0.0 --http.api eth,net,web3 \
    --ws --ws.api eth,net,web3 --authrpc.jwtsecret $ETH_DIR/jwt.hex \
    --datadir $EXECUTION/.gethdata --nodiscover --syncmode full \
    --allow-insecure-unlock --unlock "0x123463a4b065722e99115d6c222f267d9cabb524" \
    --password $ETH_DIR/geth_password.txt --authrpc.port 8551
}
function docker_start_container_geth(){
 #fixme: set appropriate ports using -p
  docker run -d --name execution \
              -v ./eth_node:/root/eth_bootstrap/eth_node \
              eth_node ./l2 geth_start
}
function  beacon_start() {
  $ETH_BIN/beacon-chain --datadir $CONSENSUS/.beacondata \
        --min-sync-peers 0 \
        --genesis-state $CONSENSUS/genesis.ssz \
        --interop-eth1data-votes \
        --chain-config-file $CONSENSUS/config.yml \
        --contract-deployment-block 0 \
        --chain-id 32382 \
        --network-id 32382 \
        --rpc-host 0.0.0.0 \
        --grpc-gateway-host 0.0.0.0 \
        --execution-endpoint $EXECUTION/.gethdata/geth.ipc \
        --accept-terms-of-use \
        --jwt-secret $ETH_DIR/jwt.hex \
        --suggested-fee-recipient 0x123463a4b065722e99115d6c222f267d9cabb524 \
        --minimum-peers-per-subnet 0 \
        --enable-debug-rpc-endpoints
}
function docker_start_container_beacon(){
#fixme: set appropriate ports using -p
  docker run -d --name beacon \
              -v ./eth_node:/root/eth_bootstrap/eth_node \
              eth_node ./l2 beacon_start
}
function validator_start(){
  $ETH_BIN/validator --datadir $CONSENSUS/.validatordata --accept-terms-of-use --interop-num-validators 64 --chain-config-file $CONSENSUS/config.yml --beacon-rpc-provider=localhost:4000
}
function docker_start_container_validator(){
  #fixme: set appropriate ports using -p
  docker run -d --name validator \
              -v ./eth_node:/root/eth_bootstrap/eth_node \
              eth_node ./l2 validator_start
}

function docker_start() {
  echo "Starting docker containers $1"
  local OPERATION=$1
  shift
  docker_stop $OPERATION
  case $OPERATION in
    execution) docker_start_container_geth;;
    beacon) docker_start_container_beacon;;
    validator) docker_start_container_validator;;
    *) for cont in execution beacon validator; do docker_start $cont; done;;
  esac
}

function docker_bash() {
  docker run -it --rm -v ./eth_node:/root/eth_bootstrap/eth_node eth_node bash
}

function usage(){
    echo './l2 docker build|genesis|import|start|stop|bash|all'
}

docker_it(){
  echo "Docker it $1"
  local OPERATION=$1
  shift
  case "$OPERATION" in
    build) docker_build;;
    genesis) docker_genesis $@;;
    import) docker_account_import;;
    stop) docker_stop $@;;
    start) docker_start $@;;
    bash) docker_bash;;
    all) docker_build; docker_genesis; docker_account_import; docker_start;;
    *) usage;;
  esac
}

OPERATION=$1
shift
case "${OPERATION}" in
beacon_genesis) beacon_genesis;;
geth_genesis) geth_genesis;;
import) account_import ;;
geth_start) geth_start;;
beacon_start) beacon_start;;
validator_start) validator_start;;
docker) docker_it $@;;

verify) verify_chain "$@";;
deposit_cli) deposit_cli;;
new_mnemonic) new_mnemonic;;
balance) get_balance "$@";;
*) usage ;;
esac
#test

