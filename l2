#!/usr/bin/bash
# real path of the folder
ETH_DIR=$(realpath $(dirname $0))
CONSENSUS=$ETH_DIR/eth_node/consensus
EXECUTION=$ETH_DIR/eth_node/execution
ETH_BIN=$ETH_DIR/eth_bin

#[[ -f ./default.env ]] && source ./default.env
#[[ -f ./.env ]] && source ./.env

function keys(){
  local FILE=$1
  [[ ! -f $FILE ]] && return
  local KEYS=$(cat $FILE | grep -v '^#' | grep -v '^$' | sed 's/^\(.*\)=\(.*\)$/ \1/')
  echo $KEYS
}

function read_properties(){
  [[ ! -f ./default.env ]] && return
  local KEYS=$(keys ./default.env)
  if [ -f ./.env ]; then KEYS="$KEYS $(keys ./.env)"; fi
  KEYS=$(echo $KEYS | tr ' ' '\n' | sort | uniq)
  [[ -f ./default.env ]] && source ./default.env
  [[ -f ./.env ]] && source ./.env
  local PROPERTIES=''
  for KEY in $KEYS; do
    PROPERTIES="$PROPERTIES -e $KEY=${!KEY}"
  done
  echo "$PROPERTIES"
}

DOCKER_ENV=$(read_properties)
#echo "DOCKER_ENV: $DOCKER_ENV"

function docker_run_rm() {
  local COMMAND="docker run -i --rm \
                  -v $ETH_DIR/eth_node:/root/eth_bootstrap/eth_node \
                  eth_node ./l2 $1"
  echo $COMMAND | sh
}

function  deposit_cli() {
    cd $ETH_DIR
    rmdir staking_deposit-cli-fdab65d-linux-amd64
    rm staking_deposit-cli-fdab65d-linux-amd64.tar.gz
    wget https://github.com/ethereum/staking-deposit-cli/releases/download/v2.7.0/staking_deposit-cli-fdab65d-linux-amd64.tar.gz
    tar -xvzf staking_deposit-cli-fdab65d-linux-amd64.tar.gz
    mv staking_deposit-cli-fdab65d-linux-amd64/deposit $ETH_BIN/deposit-cli
    rmdir staking_deposit-cli-fdab65d-linux-amd64
    rm staking_deposit-cli-fdab65d-linux-amd64.tar.gz
}

function new_mnemonic(){
  cd $ETH_DIR
  rm -rf validator_keys
  LC_ALL=C.UTF-8 LANG=C.UTF-8 $ETH_BIN/deposit-cli --language english  --non_interactive new-mnemonic  \
                                            --mnemonic_language english \
                                            --num_validators 1 \
                                            --chain mainnet \
                                            --keystore_password gluon_gluon
}

function verify_chain(){
  local IMPORTED_ACCOUNT=0x123463a4b065722e99115d6c222f267d9cabb524
  local DEPOSIT_ACCOUNT=$1
  echo "Balance: $IMPORTED_ACCOUNT $(get_balance $IMPORTED_ACCOUNT)"
  echo "Balance: $DEPOSIT_ACCOUNT $(get_balance $DEPOSIT_ACCOUNT)"
  echo "Transfering 1 ETH from $IMPORTED_ACCOUNT to $DEPOSIT_ACCOUNT"
  transfer $IMPORTED_ACCOUNT $DEPOSIT_ACCOUNT 0x$(echo "obase=16; 5000000000000000000000" | bc)
  sleep 10
  echo "Balance: $IMPORTED_ACCOUNT $(get_balance $IMPORTED_ACCOUNT)"
  echo "Balance: $DEPOSIT_ACCOUNT $(get_balance $DEPOSIT_ACCOUNT)"
}

function transfer(){
  local FROM=$1
  local TO=$2
  local AMOUNT=$3
  echo "Transfering $AMOUNT from $FROM to $TO"
  curl --silent -X POST -H "Content-Type: application/json"  \
       --data "{\"jsonrpc\":\"2.0\",\"method\":\"eth_sendTransaction\",\"params\":[{\"from\":\"$FROM\",\"to\":\"$TO\",\"value\":\"$AMOUNT\"}],\"id\":1}" \
        http://localhost:8545

}

function get_balance(){
  local ADDRESS=$1
  curl --silent -X POST -H "Content-Type: application/json"  \
       --data "{\"jsonrpc\":\"2.0\",\"method\":\"eth_getBalance\",\"params\":[\"$ADDRESS\", \"latest\"],\"id\":1}" \
        http://localhost:8545 | jq --raw-output '.result' | perl -lane 'print hex($F[0])'
}

function docker_build() {
  echo "Building docker image"
  docker build -t eth_node .
}

function beacon_genesis(){
    echo "Generating beacon genesis"
    rm -rf $ETH_DIR/eth_node/* # do not delete the eth_node directory as it is mounted
    mkdir -p $CONSENSUS
    mkdir -p $EXECUTION
    cd $CONSENSUS
    cp $ETH_DIR/config.yml .
    cp $ETH_DIR/default.genesis.json ./genesis.json
    $ETH_BIN/prysmctl testnet generate-genesis --fork capella --num-validators 64 \
      --genesis-time-delay 120 --chain-config-file $CONSENSUS/config.yml \
      --geth-genesis-json-in $CONSENSUS/genesis.json --geth-genesis-json-out $EXECUTION/genesis.json \
      --output-ssz $CONSENSUS/genesis.ssz
}

function geth_genesis(){
    rm -rf $EXECUTION/.gethdata
    cd $EXECUTION
    $ETH_BIN/geth --datadir=$EXECUTION/.gethdata init $EXECUTION/genesis.json
    account_import
}
function bootstrap_genesis(){
    beacon_genesis
    geth_genesis
}
function node_genesis() {
    rm -rf $ETH_DIR/eth_node/* # do not delete the eth_node directory as it is mounted
    mkdir -p $CONSENSUS
    mkdir -p $EXECUTION
    cp $ETH_DIR/config.yml $CONSENSUS/
    cp $ETH_DIR/current.genesis.ssz $CONSENSUS/genesis.ssz
    cp $ETH_DIR/current.genesis.json $EXECUTION/genesis.json
    geth_genesis
}

function docker_genesis() {
  echo "Running genesis for $1"
  local OPERATION=$1
  shift
  case $OPERATION in
    bootstrap)
      docker_run_rm bootstrap_genesis
      cp $CONSENSUS/genesis.ssz $ETH_DIR/current.genesis.ssz
      cp $EXECUTION/genesis.json $ETH_DIR/current.genesis.json
      ;;
    node) docker_run_rm node_genesis;;
    *) usage;;
  esac
}

function account_import(){
    cd $EXECUTION
    rm -rf .gethdata/keystore
    $ETH_BIN/geth --datadir=$EXECUTION/.gethdata account \
      import --password ../../geth_password.txt $ETH_DIR/secret.txt
}
function docker_account_import() {
  docker_run_rm import
}

function docker_stop() {
  echo "Stopping docker containers $1"
  local OPERATION=$1
  shift
  case $OPERATION in
    beacon) docker stop beacon; docker rm beacon;;
    geth) docker stop geth; docker rm geth;;
    validator) docker stop validator; docker rm validator;;
    *) for cont in beacon geth validator; do docker_stop $cont; done;;
  esac
}

function geth_start(){
  $ETH_BIN/geth --http --http.addr 0.0.0.0 --http.corsdomain=* \
    --authrpc.vhosts=* --authrpc.addr 0.0.0.0 --http.api eth,net,web3 \
    --ws --ws.api eth,net,web3 --authrpc.jwtsecret $ETH_DIR/jwt.hex \
    --datadir $EXECUTION/.gethdata --nodiscover --syncmode full \
    --allow-insecure-unlock --unlock $GETH_UNLOCK \
    --password $ETH_DIR/geth_password.txt --authrpc.port 8551
}
function docker_start_container_geth(){
 #fixme: set appropriate ports using -p
  docker run -d --name geth \
              $DOCKER_ENV \
              -v $ETH_DIR/eth_node:/root/eth_bootstrap/eth_node \
	            -p 8551:8551 \
              -p 8545:8545 \
              -p 8546:8546 \
              -p 9001:9001 \
              eth_node ./l2 geth_start
}

function beacon_peer(){
  local PEER_ID=$(curl --silent http://$GENESIS_BEACON_IP:$GENESIS_BEACON_RPC_PORT/eth/v1/node/identity | jq --raw-output '.data.peer_id')
  echo "/ip4/$GENESIS_BEACON_IP/tcp/$GENESIS_BEACON_TCP_PORT/p2p/$PEER_ID"
}
function  beacon_start() {
  [[ "$BEACON_MIN_SYNC_PEERS" -eq 1 ]] && BEACON_PEER="--peer $(beacon_peer)"
  $ETH_BIN/beacon-chain --datadir $CONSENSUS/.beacondata \
        --min-sync-peers $BEACON_MIN_SYNC_PEERS $BEACON_PEER \
      	--p2p-host-ip $P2P_HOST_IP \
        --genesis-state $CONSENSUS/genesis.ssz \
        --interop-eth1data-votes \
        --chain-config-file $CONSENSUS/config.yml \
        --contract-deployment-block 0 \
        --chain-id $CHAIN_ID \
        --network-id $NETWORK_ID \
        --rpc-host 0.0.0.0 \
        --grpc-gateway-host 0.0.0.0 \
        --execution-endpoint $EXECUTION/.gethdata/geth.ipc \
        --accept-terms-of-use \
        --jwt-secret $ETH_DIR/jwt.hex \
        --suggested-fee-recipient $SUGGESTED_FEE_RECIPIENT \
        --minimum-peers-per-subnet 0 \
        --verbosity $VERBOSITY \
        --enable-debug-rpc-endpoints
}
function docker_start_container_beacon(){
#fixme: set appropriate ports using -p
  docker run -d --name beacon \
              $DOCKER_ENV \
              -v $ETH_DIR/eth_node:/root/eth_bootstrap/eth_node \
              -p 4000:4000 \
      	      -p 3500:3500 \
      	      -p 8080:8080 \
      	      -p 6060:6060 \
              -p 9090:9090 \
              -p 13000:13000\
              -p 12000:12000 \
              eth_node ./l2 beacon_start
}
function validator_start(){
  $ETH_BIN/validator --datadir $CONSENSUS/.validatordata \
    --accept-terms-of-use --interop-num-validators 64 --chain-config-file $CONSENSUS/config.yml \
    --beacon-rpc-provider=172.17.0.1:4000
}
function docker_start_container_validator(){
  #fixme: set appropriate ports using -p
  docker run -d --name validator \
              $DOCKER_ENV \
              -v $ETH_DIR/eth_node:/root/eth_bootstrap/eth_node \
              eth_node ./l2 validator_start
}

function docker_start() {
  echo "Starting docker containers $1"
  local OPERATION=$1
  shift
  docker_stop $OPERATION
  case $OPERATION in
    beacon) docker_start_container_beacon;;
    geth) docker_start_container_geth;;
    validator) docker_start_container_validator;;
    *) for cont in beacon geth validator; do docker_start $cont; done;;
  esac
}

function docker_clean() {
  echo "Cleaning docker containers $1"
  local OPERATION=$1
  shift
  docker_stop $OPERATION
  case $OPERATION in
    beacon) rm -rf $CONSENSUS/.beacondata/*;;
    geth) rm -rf $EXECUTION/.gethdata/geth.ipc $EXECUTION/.gethdata/geth/*;;
    validator) rm -rf $CONSENSUS/.validatordata/*;;
    *) for cont in beacon geth validator; do docker_clean $cont; done;;
  esac
}

function docker_copy() {
    docker run -d --name cp_bin eth_node sleep 10000
    docker cp cp_bin:/root/eth_bootstrap/eth_bin $ETH_DIR
    docker stop cp_bin
    docker rm cp_bin
}

function docker_bash() {
  docker run -it --rm -v $ETH_DIR/eth_node:/root/eth_bootstrap/eth_node eth_node bash
}

function usage(){
    echo './l2 docker build'
    echo './l2 docker genesis bootstrap|node'
    echo './l2 docker import'
    echo './l2 docker start [geth|beacon|validator]'
    echo './l2 docker stop [geth|beacon|validator]'
    echo './l2 docker clean [geth|beacon|validator]'
    echo './l2 docker copy'
    echo './l2 docker bash'
}

function docker_it(){
  echo "Docker it $1"
  local OPERATION=$1
  shift
  docker_build # temporary
  case "$OPERATION" in
    build) docker_build;;
    genesis) docker_genesis $@;;
    import) docker_account_import;;
    stop) docker_stop $@;;
    start) docker_start $@;;
    clean) docker_clean $@;;
    copy) docker_copy;;
    bash) docker_bash;;
    *) usage;;
  esac
}

OPERATION=$1
shift
case "${OPERATION}" in
beacon_genesis) beacon_genesis;;
geth_genesis) geth_genesis;;
bootstrap_genesis) bootstrap_genesis;;
node_genesis) node_genesis;;
import) account_import ;;
geth_start) geth_start;;
beacon_start) beacon_start;;
validator_start) validator_start;;
docker) docker_it $@;;
scan) beacon_scan;;

verify) verify_chain "$@";;
deposit_cli) deposit_cli;;
new_mnemonic) new_mnemonic;;
balance) get_balance "$@";;
*) usage ;;
esac

