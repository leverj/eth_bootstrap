#!/usr/bin/env bash
#!/usr/bin/bash

# real path of the folder
ETH_DIR=$(realpath $(dirname $0))
CONSENSUS=$ETH_DIR/eth_node/consensus
EXECUTION=$ETH_DIR/eth_node/execution
ETH_BIN=$ETH_DIR/eth_bin
[[ -f ./default.env ]] && source ./default.env
[[ -f ./.env ]] && source ./.env
DOCKER_IMG=${DOCKER_IMG:-leverj/layer2:main}
docker pull $DOCKER_IMG
function keys(){
  local FILE=$1
  [[ ! -f $FILE ]] && return
  local KEYS=$(cat $FILE | grep -v '^#' | grep -v '^$' | sed 's/^\(.*\)=\(.*\)$/ \1/')
  echo $KEYS
}

function beacon_peer(){
  local PEER_ID=$(curl --silent http://$GENESIS_BEACON_IP:$GENESIS_BEACON_RPC_PORT/eth/v1/node/identity | jq --raw-output '.data.peer_id')
  echo "/ip4/$GENESIS_BEACON_IP/tcp/$GENESIS_BEACON_TCP_PORT/p2p/$PEER_ID"
}

function read_properties(){
  [[ ! -f ./default.env ]] && return
  local KEYS=$(keys ./default.env)
  if [ -f ./.env ]; then KEYS="$KEYS $(keys ./.env)"; fi
  KEYS=$(echo $KEYS | tr ' ' '\n' | sort | uniq)
  local PROPERTIES=''
  for KEY in $KEYS; do
    PROPERTIES="$PROPERTIES -e $KEY=${!KEY}"
  done
  PROPERTIES="$PROPERTIES -e NETWORK_ID=$CHAIN_ID -e BEACON_PEER_ID=$(beacon_peer)"
  echo "$PROPERTIES"
}

DOCKER_ENV=$(read_properties)
#echo "DOCKER_ENV: $DOCKER_ENV"

function docker_run_rm() {
  local COMMAND="docker run -i --rm \
                  -v $ETH_DIR/eth_node:/root/eth_bootstrap/eth_node \
                  $DOCKER_IMG ./container_l2 $1"
  echo $COMMAND | sh
}
function create_eth_node_directory(){
  rm -rf $ETH_DIR/eth_node/* # do not delete the eth_node directory as it is mounted
  mkdir -p $CONSENSUS
  mkdir -p $EXECUTION
  cp $ETH_DIR/{geth_password.txt,jwt.hex} $ETH_DIR/eth_node/
  cp $ETH_DIR/config.yml $CONSENSUS/ # copy the config file to consensus
  cp $ETH_DIR/default.genesis.json $CONSENSUS/genesis.json
  sed -i "s/\"CHAIN_ID_REPLACE\"/$CHAIN_ID/" "$CONSENSUS/genesis.json"
}

function genesis() {
  echo "Running genesis for $1"
  local OPERATION=$1
  shift
  generate_secret geth_password.txt
  generate_secret jwt.hex
  create_eth_node_directory
  case $OPERATION in
    bootstrap)
      docker_run_rm bootstrap_genesis
      cp $CONSENSUS/genesis.ssz $ETH_DIR/current.genesis.ssz
      cp $EXECUTION/genesis.json $ETH_DIR/current.genesis.json
      ;;
    node)
      cp $ETH_DIR/current.genesis.ssz $CONSENSUS/genesis.ssz
      cp $ETH_DIR/current.genesis.json $EXECUTION/genesis.json
      docker_run_rm node_genesis;;
    *) usage;;
  esac
}

function stop() {
  echo "Stopping docker containers $1"
  local OPERATION=$1
  shift
  case $OPERATION in
    beacon) docker stop beacon; docker rm beacon;;
    geth) docker stop geth; docker rm geth;;
    validator) docker stop validator; docker rm validator;;
    *) for cont in beacon geth validator; do stop $cont; done;;
  esac
}

function start_container_geth(){
 #fixme: set appropriate ports using -p
  docker run -d --name geth \
              $DOCKER_ENV \
              -v $ETH_DIR/eth_node:/root/eth_bootstrap/eth_node \
	            -p 8551:8551 \
              -p 8545:8545 \
              -p 8546:8546 \
              -p 9001:9001 \
              $DOCKER_IMG ./container_l2 geth_start
}

function start_container_beacon(){
#fixme: set appropriate ports using -p
  docker run -d --name beacon \
              $DOCKER_ENV \
              -v $ETH_DIR/eth_node:/root/eth_bootstrap/eth_node \
              -p 4000:4000 \
      	      -p 3500:3500 \
      	      -p 8080:8080 \
      	      -p 6060:6060 \
              -p 9090:9090 \
              -p 13000:13000\
              -p 12000:12000 \
              $DOCKER_IMG ./container_l2 beacon_start
}

function start_container_validator(){
  #fixme: set appropriate ports using -p
  docker run -d --name validator \
              $DOCKER_ENV \
              -v $ETH_DIR/eth_node:/root/eth_bootstrap/eth_node \
              $DOCKER_IMG ./container_l2 validator_start
}

function start() {
  echo "Starting docker containers $1"
  local OPERATION=$1
  shift
  stop $OPERATION
  case $OPERATION in
    beacon) start_container_beacon;;
    geth) start_container_geth;;
    validator) start_container_validator;;
    *) for cont in beacon geth validator; do start $cont; done;;
  esac
}

function clean() {
  echo "Cleaning docker containers $1"
  local OPERATION=$1
  shift
  stop $OPERATION
  case $OPERATION in
    beacon) rm -rf $CONSENSUS/.beacondata/*;;
    geth) rm -rf $EXECUTION/.gethdata/geth.ipc $EXECUTION/.gethdata/geth/*;;
    validator) rm -rf $CONSENSUS/.validatordata/*;;
    *) for cont in beacon geth validator; do clean $cont; done;;
  esac
}

function generate_secret() {
  local SECRET_FILE="$ETH_DIR/$1"
  if [[ ! -f $PASSWORD_FILE ]]; then
    echo "0x$(openssl rand -hex 32)" > $SECRET_FILE
  else
    echo "Using existing secret: $SECRET_FILE"
  fi
}

function usage(){
    echo './l2 genesis bootstrap|node'
    echo './l2 start [geth|beacon|validator]'
    echo './l2 stop [geth|beacon|validator]'
    echo './l2 clean [geth|beacon|validator]'
}

OPERATION=$1
shift
case "${OPERATION}" in
genesis) genesis $@;;
start) start $@;;
stop) stop $@;;
clean) clean $@;;
*) usage ;;
esac

